set.seed(071023)
n = 2000
nsim = 1000
## Generate simulation inputs
OR      <- c(1/1.50) # Assume these PORs
logOR   <- log(OR)                     # Take their log.
sdlogOR <- c(0.1) # Moderate departure from PO
# Munge simulation scenarios
scen <- expand.grid("logOR" = logOR, "sdlogOR" = sdlogOR)
## Define states and other parameters
# 3 category outcome
states <- c("A", "B", "C","D","E","F","G","H","I","J", "K","L","M")
iStates <- seq(states)
# Control probs in higher categories
quant <- pbeta(c(1/length(states) * seq(1,length(states)-1,1)),1.3,0.9)
p0 <- c(diff(c(0,quant)),1-quant[length(states)-1])
## Load in the appropriate packages
library("truncnorm")
## Define functions
getProbs <- function(p0 = c(10, 40, 10,40)/100,
logOddsRatio, sdLogOR)
{
cumProbs0   <- cumsum(p0)
cumOdds0    <- cumProbs0/(1 - cumProbs0)
cumlogOdds0 <- log(cumOdds0)
cumlogOdds1 <- rep(NA,length(p0))
cumlogOdds1[length(p0)] <- Inf
for(i in (length(p0) - 1):1){
cumlogOdds1[i] <- cumlogOdds0[i] + rtruncnorm(n=1,b=(cumlogOdds1[i+1]-cumlogOdds0[i]),mean=logOddsRatio,
sd=sdLogOR)
}
cumOdds1    <- exp(cumlogOdds1)
cumProbs1   <- cumOdds1/(1 + cumOdds1)
cumProbs1[length(cumProbs1)] <- 1
p1          <- diff(c(0,cumProbs1))
p1
## Any negative probabilities?
for(i in 1:length(p1)){
if(p1[i] < 0)
stop("Probabilities are negative")
}
p1
}
## Simulate a trial function
simulateTrial <- function(logOddsRatio,
nSamples0,
nSamples1,
sdLogOR,
p0     = c(20, 40, 30,10)/100,
states = c("A", "B", "C","D"))
{
## Define outcome probabilities for the treatment group
p1   <- getProbs(p0, logOddsRatio, sdLogOR)
p1
# Simulate two arm trial data.
